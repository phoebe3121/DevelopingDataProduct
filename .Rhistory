35952*0.044
35952*0.044+624.14
4*116.6
2206-446.4
1259.6/25
q()
q()
version
library(ElemStatLearn)
install.packages("ElemStatLearn")
library("ElemStatLearn")
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
head(vowel)
head(vowel.y)
head(vowel.train)
data(vowel.train)
head(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
my.rf = train(y~., data=vowel.train, method="rf")
library("caret")
install.packages("caret")
library("caret")
my.rf = train(y~., data=vowel.train, method="rf")
install.packages("e1071")
my.rf = train(y~., data=vowel.train, method="rf")
my.gbm = train(y~., data=vowel.train, method="gbm")
my.rf$pred
my.rf.pred = predict(my.rf, newdata=vowel.test)
my.rf.pred
confusionMatrix(my.rf.pred, vowel.test$y)
my.gbm.pred = predict(my.gbm, newdata=vowel.test)
confusionMatrix(my.rf.pred, vowel.test$y)
confustionMatrix(my.gbm.pred, vowel.test$y)
confusionMatrix(my.gbm.pred, vowel.test$y)
confusionMatrix(my.rf.pred, my.gbm.pred)
confusionMatrix(my.rf.pred[my.rf.pred==my.gbm.pred], vowel.test$y[my.rf.pred==my.gbm.pred])
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData(data.frame(diagnosis, predictors))
adData=data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
my.rf = train(diagnosis~., data=training, method="rf")
my.rf$finalModel$confusion
my.rf = train(diagnosis~., data=training, method="gbm")
my.rf = train(diagnosis~., data=training, method="rf")
my.gbm = train(diagnosis~., data=training, method="gbm", verbose=F)
my.ida = train(diagnosis~., data=training, method="ida")
my.ida = train(diagnosis~., data=training, method="Ida")
my.ida = train(diagnosis~., data=training, method="lda")
my.rf.pred = predict(my.rf, newdata=testing)
my.gbm.pred = predict(my.gbm, newdata=testing)
my.ida.pred = predict(my.ida, newdata=testing)
my.ida.pred), method="rf")
my.ensemble = train(diagnosis~., data=data.frame(diagnosis,
my.rf.pred,
my.gbm.pred,
my.ida.pred), method="rf")
my.ensemble = train(diagnosis~., data=data.frame(testing$diagnosis,
my.rf.pred,
my.gbm.pred,
my.ida.pred), method="rf")
length(testing$diagnosis)
length(my.rf.pred)
length(my.gbm.pred)
length(my.ida.pred)
mydf.ensemble = data.frame(testing$diagnosis, my.rf.pred, my.gbm.pred, my.ida.pred)
head(mydf.ensemble)
my.ensemble = train(testing.diagnosis~., data=data.frame(testing$diagnosis,
my.rf.pred,
my.gbm.pred,
my.ida.pred), method="rf")
confusionMatrix(my.ensemble$finalModel$predicted, testing$diagnosis)
confusionMatrix(my.ida.pred, testing$diagnosis)
confusionMatrix(my.rf.pred, testing$diagnosis)
confusionMatrix(my.gbm.pred, testing$diagnosis)
confusionMatrix(my.ida.pred, testing$diagnosis)
head(mydf.ensemble)
my.ensemble = train(testing.diagnosis~., data=data.frame(testing$diagnosis,
my.rf.pred,
my.gbm.pred,
my.ida.pred), method="rf")
my.ensemble.pred = predict(my.ensemble, testing)
confusionMatrix(my.ensemble.pred, testing$diagnosis)
confusionMatrix(my.rf.pred, testing$diagnosis)
confusionMatrix(my.gbm.pred, testing$diagnosis)
confusionMatrix(my.ida.pred, testing$diagnosis)
mydf.ensemble = data.frame(testing$diagnosis, my.rf.pred, my.gbm.pred, my.ida.pred)
my.ensemble = train(testing.diagnosis~., data=data.frame(testing$diagnosis,
my.rf.pred,
my.gbm.pred,
my.ida.pred), method="rf")
my.ensemble.pred = predict(my.ensemble, testing)
confusionMatrix(my.ensemble.pred, testing$diagnosis)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)data(concrete)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
library(lasso)
install.packages('lasso')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='phoebe3121',
token='CC10BC128BEA20AFBD665893621431B1',
secret='occLTt02+wP08Doa2fy2bAyJCoGjZa/8ZBUTvJQN')
install.packages("rsconnect")
version()
version
install.packages("rsconnect")
rsconnect::setAccountInfo(name='phoebe3121',
token='CC10BC128BEA20AFBD665893621431B1',
secret='occLTt02+wP08Doa2fy2bAyJCoGjZa/8ZBUTvJQN')
ls
getwd()
setwd("coursera")
list.files()
setwd("DevelopingDataProduct/")
ls
list.files()
getwd("..")
setwd("..")
rsconnect::deployApp(".")
list.files()
rsconnect::deployApp("DevelopingDataProduct")
install("xtable")
install.packages("R6")
install.packages("Rcpp")
install.packages("htmltools")
install.packages("httpuv")
install.packages("jsonlit")
install.packages("jsonlite")
install.packages("mime")
install.packages("shiny")
install.packages("xtable")
rsconnect::deployApp("DevelopingDataProduct")
runApp("DevelopingDataProduct/")
runApp("DevelopingDataProduct")
library(shiny)
runApp("DevelopingDataProduct")
install.packages("mapproj")
runApp("DevelopingDataProduct")
runApp("DevelopingDataProduct")
rsconnect::deployApp("DevelopingDataProduct")
runApp("DevelopingDataProduct")
